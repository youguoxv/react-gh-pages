{"version":3,"sources":["Components/ColumnMiddle/AnimationPreview.js","Components/ColumnMiddle/StickerSet.js","Components/ColumnMiddle/StickersPickerHeader.js","Components/ColumnMiddle/StickersPicker.js","Components/ColumnMiddle/GifsPicker.js","Components/ColumnMiddle/EmojiPickerButton.js"],"names":["AnimationPreview","animation","this","props","className","Animation","type","stretch","style","borderRadius","React","Component","StickerSet","nextProps","nextState","nextContext","info","onSelect","onMouseDown","onMouseEnter","onDeleteClick","title","items","stickers","map","x","i","key","sticker","id","data-sticker-id","onClick","width","STICKER_SMALL_DISPLAY_SIZE","height","Sticker","autoplay","blur","displaySize","preview","source","StickerSourceEnum","PICKER","IconButton","aria-label","classes","root","size","fontSize","StickersPickerHeader","onClientUpdateStickerSetPosition","update","position","setState","scrollToPosition","state","animator","anchorRef","scroll","scrollRef","current","anchor","anchorNode","ReactDOM","scrollFrom","scrollLeft","scrollTo","anchorFrom","Number","left","replace","anchorTo","stop","Animator","from","to","func","Math","abs","sign","setTimeout","start","handleWheel","event","deltaX","deltaY","handleSelect","indexOf","createRef","StickerStore","on","off","prevProps","prevState","snapshot","recent","recentItem","play","PICKER_HEADER","openMedia","ref","classNames","onWheel","StickersPicker","onUpdateInstalledStickerSets","is_masks","sticker_set_ids","filterSets","onUpdateRecentStickers","reloadRecentContent","scrollTop","loadContent","stickerSets","sets","a","TdLibController","send","is_attached","result","promises","forEach","push","set_id","Promise","all","slicedSets","slice","headerStickers","reduce","set","length","fullSets","setsLength","loadInViewContentOnScroll","loadInViewContent","loadInViewContentOnScrollEnd","padding","inViewItems","item","itemsMap","get","node","topBorder","bottomBorder","offsetHeight","nodeTop","offsetTop","nodeBottom","clientHeight","store","FileStore","getStore","loadedSets","has","loadStickerSetContent","updatePosition","minDiff","scrollHeight","startPosition","element","diff","pos","clientUpdate","handleScroll","scrolling","now","Date","lastScrollTime","scrollTimer","clearTimeout","loadingChunk","loadChunk","finally","concat","loadPreviewContent","stickerId","getStickers","find","loadStickerContent","getNeighborStickersFromSets","handleMouseEnter","currentTarget","dataset","mouseDown","mouseDownStickerId","previewStickerId","onPreview","handleMouseDown","timestamp","showPreview","cancelSend","document","addEventListener","handleMouseUp","preventDefault","stopPropagation","removeEventListener","handleStickerSelect","handleSelectSet","concatSets","handleDeleteRecent","handleDeleteStickerSet","is_installed","Map","debounce","throttle","t","clear","el","recentInfo","onScroll","Boolean","enhance","compose","withSaveRef","withTranslation","withRestoreRef","GifsPicker","begin","end","cancel","prevScrollTop","savedAnimations","AnimationStore","animations","inViewMap","inViewIndexes","index","animationsInView","mapEquals","animationIndex","openAnimation","forceUpdate","loadAnimationThumbnailContent","loadAnimationContent","data-animation-index","margin","EmojiPickerButton","onClientUpdateChange","open","removePicker","picker","handleButtonMouseEnter","buttonEnter","updatePicker","loadStickerSets","loadSavedAnimations","tab","gifsPicker","gifsPickerRef","EMOJI_PICKER_TIMEOUT_MS","stickersPickerRef","loadRecentStickersContent","reverse","loadStickerThumbnailContent","handleButtonMouseLeave","tryClosePicker","paperEnter","handlePaperMouseEnter","handlePaperMouseLeave","handleEmojiClick","stickersPicker","handleStickersClick","handleGifsClick","handleStickerSend","handleStickerPreview","handleGifSend","handleGifPreview","emojiPickerRef","AppStore","LocalizationStore","theme","i18n","search","notfound","skintext","categories","people","nature","foods","activity","places","objects","symbols","flags","custom","showSkinTones","color","palette","primary","dark","native","isAppleDevice","overflowX","top","rel","href","onMouseLeave","Button","withTheme"],"mappings":"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","file":"static/js/7.f2934d7b.chunk.js","sourcesContent":["/*\r\n *  Copyright (c) 2018-present, Evgeny Nadymov\r\n *\r\n * This source code is licensed under the GPL v.3.0 license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Animation from '../Message/Media/Animation';\r\nimport './StickerPreview.css';\r\n\r\nclass AnimationPreview extends React.Component {\r\n    render() {\r\n        const { animation } = this.props;\r\n        if (!animation) return null;\r\n\r\n        return (\r\n            <div className='sticker-preview'>\r\n                <Animation\r\n                    type='preview'\r\n                    stretch={true}\r\n                    animation={animation}\r\n                    style={{ borderRadius: 0 }}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nAnimationPreview.propTypes = {\r\n    animation: PropTypes.object\r\n};\r\n\r\nexport default AnimationPreview;\r\n","/*\r\n *  Copyright (c) 2018-present, Evgeny Nadymov\r\n *\r\n * This source code is licensed under the GPL v.3.0 license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport Sticker, { StickerSourceEnum } from '../Message/Media/Sticker';\r\nimport { STICKER_SMALL_DISPLAY_SIZE } from '../../Constants';\r\nimport './StickerSet.css';\r\n\r\nclass StickerSet extends React.Component {\r\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\r\n        const { info } = this.props;\r\n\r\n        if (info !== nextProps.info) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        const { info, onSelect, onMouseDown, onMouseEnter, onDeleteClick } = this.props;\r\n        if (!info) return null;\r\n\r\n        const { title, stickers } = info;\r\n\r\n        const items = stickers.map((x, i) => (\r\n            <div\r\n                className='sticker-set-item'\r\n                key={x.sticker.id}\r\n                data-sticker-id={x.sticker.id}\r\n                onClick={() => onSelect(x)}\r\n                onMouseEnter={onMouseEnter}\r\n                onMouseDown={onMouseDown}\r\n                style={{\r\n                    width: STICKER_SMALL_DISPLAY_SIZE,\r\n                    height: STICKER_SMALL_DISPLAY_SIZE\r\n                }}>\r\n                <Sticker\r\n                    key={x.sticker.id}\r\n                    sticker={x}\r\n                    autoplay={false}\r\n                    blur={false}\r\n                    displaySize={STICKER_SMALL_DISPLAY_SIZE}\r\n                    preview\r\n                    source={StickerSourceEnum.PICKER}\r\n                />\r\n            </div>\r\n        ));\r\n\r\n        return (\r\n            <div className='sticker-set'>\r\n                <div className='sticker-set-title'>\r\n                    <div className='sticker-set-title-wrapper'>\r\n                        <span>{title}</span>\r\n                    </div>\r\n                    {onDeleteClick && (\r\n                        <IconButton\r\n                            aria-label='delete'\r\n                            classes={{ root: 'sticker-set-icon-root' }}\r\n                            size='small'\r\n                            onClick={onDeleteClick}>\r\n                            <ClearIcon fontSize='inherit' />\r\n                        </IconButton>\r\n                    )}\r\n                </div>\r\n                <div className='sticker-set-content'>{items}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nStickerSet.propTypes = {\r\n    info: PropTypes.object.isRequired,\r\n    onSelect: PropTypes.func.isRequired,\r\n    onMouseDown: PropTypes.func.isRequired,\r\n    onDeleteClick: PropTypes.func\r\n};\r\n\r\nexport default StickerSet;\r\n","/*\r\n *  Copyright (c) 2018-present, Evgeny Nadymov\r\n *\r\n * This source code is licensed under the GPL v.3.0 license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nimport React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\r\nimport Animator from '../../Utils/Animatior';\r\nimport Sticker from './../Message/Media/Sticker';\r\nimport { StickerSourceEnum } from '../Message/Media/Sticker';\r\nimport StickerStore from '../../Stores/StickerStore';\r\nimport './StickersPickerHeader.css';\r\n\r\nclass StickersPickerHeader extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.scrollRef = React.createRef();\r\n        this.anchorRef = React.createRef();\r\n\r\n        this.state = { position: 0 };\r\n    }\r\n\r\n    componentDidMount() {\r\n        StickerStore.on('clientUpdateStickerSetPosition', this.onClientUpdateStickerSetPosition);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        StickerStore.off('clientUpdateStickerSetPosition', this.onClientUpdateStickerSetPosition);\r\n    }\r\n\r\n    onClientUpdateStickerSetPosition = update => {\r\n        const { position } = update;\r\n\r\n        // console.log('[header] setPosition', position);\r\n        this.setState({ position });\r\n    };\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevState.position !== this.state.position) {\r\n            this.scrollToPosition();\r\n        }\r\n    }\r\n\r\n    scrollToPosition = () => {\r\n        const { position } = this.state;\r\n        const { animator, anchorRef, scrollRef } = this;\r\n\r\n        const scroll = scrollRef.current;\r\n        const anchor = anchorRef.current;\r\n        const anchorNode = ReactDOM.findDOMNode(anchor);\r\n\r\n        const scrollFrom = scroll.scrollLeft;\r\n        const scrollTo = position * 48 - 147;\r\n\r\n        const anchorFrom = Number(anchorNode.style.left.replace('px', ''));\r\n        const anchorTo = position * 48;\r\n\r\n        if (animator) {\r\n            animator.stop();\r\n        }\r\n\r\n        this.animator = new Animator(0, [\r\n            {\r\n                from: scrollFrom,\r\n                to: scrollTo,\r\n                func: left => (scroll.scrollLeft = left)\r\n            },\r\n            {\r\n                from:\r\n                    Math.abs(anchorTo - anchorFrom) > 338\r\n                        ? anchorTo - Math.sign(anchorTo - anchorFrom) * 338\r\n                        : anchorFrom,\r\n                to: anchorTo,\r\n                func: left => (anchorNode.style.left = left + 'px')\r\n            }\r\n        ]);\r\n\r\n        setTimeout(() => {\r\n            if (!this.animator) return;\r\n\r\n            this.animator.start();\r\n        }, 0);\r\n        // this.animator.start();\r\n    };\r\n\r\n    handleWheel = event => {\r\n        const { scrollRef } = this;\r\n\r\n        if (event.deltaX === 0) {\r\n            const scroll = scrollRef.current;\r\n\r\n            scroll.scrollLeft += event.deltaY;\r\n        }\r\n    };\r\n\r\n    handleSelect = sticker => {\r\n        const { stickers, onSelect } = this.props;\r\n\r\n        // console.log('[header] handleSelect', stickers.indexOf(sticker));\r\n        onSelect(stickers.indexOf(sticker));\r\n    };\r\n\r\n    render() {\r\n        const { recent, stickers } = this.props;\r\n\r\n        const recentItem = recent ?\r\n            <div\r\n                className='stickers-picker-header-recent'\r\n                onClick={() => this.handleSelect('recent')}>\r\n                <AccessTimeIcon/>\r\n            </div> :\r\n            null;\r\n\r\n        const items = stickers.map(x => (\r\n            <Sticker\r\n                key={x.sticker.id}\r\n                className='stickers-picker-header-sticker'\r\n                sticker={x}\r\n                play={false}\r\n                autoplay={false}\r\n                blur={false}\r\n                displaySize={36}\r\n                preview\r\n                source={StickerSourceEnum.PICKER_HEADER}\r\n                openMedia={() => this.handleSelect(x)}\r\n            />\r\n        ));\r\n\r\n        return (\r\n            <div className='stickers-picker-header'>\r\n                <div ref={this.scrollRef} className={classNames('stickers-picker-header-scroll', 'scrollbars-hidden')} onWheel={this.handleWheel}>\r\n                    <div className='stickers-picker-header-items'>\r\n                        {recentItem}\r\n                        {items}\r\n                    </div>\r\n                    <div ref={this.anchorRef} className='stickers-picker-header-anchor' />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nStickersPickerHeader.propTypes = {\r\n    recent: PropTypes.object,\r\n    stickers: PropTypes.array.isRequired,\r\n    onSelect: PropTypes.func.isRequired\r\n};\r\n\r\nexport default StickersPickerHeader;\r\n","/*\r\n *  Copyright (c) 2018-present, Evgeny Nadymov\r\n *\r\n * This source code is licensed under the GPL v.3.0 license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nimport React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport { compose } from '../../Utils/HOC';\r\nimport { withRestoreRef, withSaveRef } from '../../Utils/HOC';\r\nimport { withTranslation } from 'react-i18next';\r\nimport StickerSet from './StickerSet';\r\nimport StickersPickerHeader from './StickersPickerHeader';\r\nimport { debounce, throttle } from '../../Utils/Common';\r\nimport { loadStickerContent, loadStickerSetContent } from '../../Utils/File';\r\nimport { getNeighborStickersFromSets, getStickers } from '../../Utils/Media';\r\nimport FileStore from '../../Stores/FileStore';\r\nimport StickerStore from '../../Stores/StickerStore';\r\nimport TdLibController from '../../Controllers/TdLibController';\r\nimport './StickersPicker.css';\r\n\r\nclass StickersPicker extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.scrollRef = React.createRef();\r\n        this.itemsMap = new Map();\r\n        this.loadedSets = new Map();\r\n\r\n        this.state = {\r\n            recent: null,\r\n            stickerSets: null,\r\n            sets: [],\r\n            headerStickers: [],\r\n            position: 0\r\n        };\r\n\r\n        this.loadInViewContentOnScrollEnd = debounce(this.loadInViewContentOnScrollEnd, 100);\r\n        this.loadInViewContentOnScroll = throttle(this.loadInViewContentOnScroll, 2000);\r\n        this.updatePosition = throttle(this.updatePosition, 250);\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\r\n        const { position, recent, stickerSets, sets, showPreview } = this.state;\r\n\r\n        if (nextState.recent !== recent) {\r\n            return true;\r\n        }\r\n\r\n        if (nextState.stickerSets !== stickerSets) {\r\n            return true;\r\n        }\r\n\r\n        if (nextState.sets !== sets) {\r\n            return true;\r\n        }\r\n\r\n        if (nextState.showPreview !== showPreview) {\r\n            return true;\r\n        }\r\n\r\n        if (nextState.position !== position) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    componentDidMount() {\r\n        StickerStore.on('updateInstalledStickerSets', this.onUpdateInstalledStickerSets);\r\n        StickerStore.on('updateRecentStickers', this.onUpdateRecentStickers);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        StickerStore.off('updateInstalledStickerSets', this.onUpdateInstalledStickerSets);\r\n        StickerStore.off('updateRecentStickers', this.onUpdateRecentStickers);\r\n    }\r\n\r\n    stop() {\r\n\r\n    }\r\n\r\n    onUpdateInstalledStickerSets = update => {\r\n        const { is_masks, sticker_set_ids } = update;\r\n        if (!is_masks) return;\r\n\r\n        this.filterSets();\r\n    };\r\n\r\n    onUpdateRecentStickers = update => {\r\n        this.reloadRecentContent();\r\n    };\r\n\r\n    filterSets(sticker_set_ids) {\r\n        const { sets, stickerSets } = this.state;\r\n    }\r\n\r\n    async reloadRecentContent() {\r\n        const recent = await TdLibController.send({\r\n            '@type': 'getRecentStickers',\r\n            is_attached: false\r\n        });\r\n\r\n        this.setState({\r\n            recent\r\n        });\r\n    }\r\n\r\n    scrollTop = () => {\r\n        this.scrollRef.current.scrollTop = 0;\r\n    };\r\n\r\n    loadContent = async (recent, stickerSets, sets) => {\r\n        // console.log('[sp] loadContent', recent, stickerSets, sets);\r\n\r\n        if (!recent) {\r\n            recent = await TdLibController.send({\r\n                '@type': 'getRecentStickers',\r\n                is_attached: false\r\n            });\r\n        }\r\n\r\n        if (!sets) {\r\n            const result = await TdLibController.send({\r\n                '@type': 'getInstalledStickerSets',\r\n                is_masks: false\r\n            });\r\n\r\n            const promises = [];\r\n            result.sets.forEach(x => {\r\n                promises.push(\r\n                    TdLibController.send({\r\n                        '@type': 'getStickerSet',\r\n                        set_id: x.id\r\n                    })\r\n                );\r\n            });\r\n\r\n            sets = await Promise.all(promises);\r\n        }\r\n\r\n        const slicedSets = sets.slice(0, 5);\r\n        const headerStickers = sets.reduce((preview, set) => {\r\n            if (set.stickers.length > 0) {\r\n                preview.push(set.stickers[0]);\r\n            }\r\n            return preview;\r\n        }, []);\r\n\r\n        this.setState({\r\n            recent,\r\n            stickerSets,\r\n            sets: slicedSets,\r\n            fullSets: sets,\r\n            headerStickers\r\n        });\r\n        this.setsLength = slicedSets.length;\r\n    };\r\n\r\n    loadInViewContentOnScroll = () => {\r\n        this.loadInViewContent();\r\n    };\r\n\r\n    loadInViewContentOnScrollEnd = () => {\r\n        this.loadInViewContent(400);\r\n    };\r\n\r\n    loadInViewContent = (padding = 0) => {\r\n        // console.log('[sp] loadInViewContent');\r\n        const scroll = this.scrollRef.current;\r\n\r\n        const { sets } = this.state;\r\n\r\n        const inViewItems = [];\r\n        sets.forEach(x => {\r\n            const item = this.itemsMap.get(x.id);\r\n            const node = ReactDOM.findDOMNode(item);\r\n            if (node) {\r\n                const topBorder = scroll.scrollTop - padding;\r\n                const bottomBorder = scroll.scrollTop + scroll.offsetHeight + padding;\r\n\r\n                const nodeTop = node.offsetTop;\r\n                const nodeBottom = node.offsetTop + node.clientHeight;\r\n\r\n                if (nodeTop >= topBorder && node.offsetTop <= bottomBorder) {\r\n                    inViewItems.push(x);\r\n                } else if (nodeBottom >= topBorder && nodeBottom <= bottomBorder) {\r\n                    inViewItems.push(x);\r\n                } else if (nodeTop <= topBorder && nodeBottom >= bottomBorder) {\r\n                    inViewItems.push(x);\r\n                }\r\n            }\r\n        });\r\n\r\n        inViewItems.forEach(x => {\r\n            const store = FileStore.getStore();\r\n            if (!this.loadedSets.has(x.id)) {\r\n                this.loadedSets.set(x.id, x.id);\r\n                loadStickerSetContent(store, x);\r\n            }\r\n        });\r\n    };\r\n\r\n    updatePosition = () => {\r\n        const scroll = this.scrollRef.current;\r\n\r\n        const { recent, sets } = this.state;\r\n        let minDiff = scroll.scrollHeight;\r\n        let position = 0;\r\n        let startPosition = 0;\r\n        if (recent && recent.stickers.length > 0) {\r\n            startPosition = 1;\r\n            const element = this.itemsMap.get('recent');\r\n            if (element) {\r\n                const node = ReactDOM.findDOMNode(element);\r\n                if (node && node.offsetTop <= scroll.scrollTop) {\r\n                    const offsetTop = node.offsetTop;\r\n                    if (node && offsetTop <= scroll.scrollTop) {\r\n                        const diff = Math.abs(scroll.scrollTop - offsetTop);\r\n                        if (diff <= minDiff) {\r\n                            minDiff = diff;\r\n                            position = 0;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        sets.forEach((x, pos) => {\r\n            const element = this.itemsMap.get(x.id);\r\n            if (element) {\r\n                const node = ReactDOM.findDOMNode(element);\r\n                if (node && node.offsetTop <= scroll.scrollTop) {\r\n                    const offsetTop = node.offsetTop;\r\n                    if (node) {\r\n                        const diff = Math.abs(scroll.scrollTop - offsetTop);\r\n                        if (diff <= minDiff) {\r\n                            minDiff = diff;\r\n                            position = startPosition + pos;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        TdLibController.clientUpdate({\r\n            '@type': 'clientUpdateStickerSetPosition',\r\n            position\r\n        });\r\n    };\r\n\r\n    handleScroll = async () => {\r\n        this.scrolling = true;\r\n        const now = new Date();\r\n        this.lastScrollTime = now;\r\n        if (this.scrollTimer) clearTimeout(this.scrollTimer);\r\n        this.scrollTimer = setTimeout(() => {\r\n            if (now !== this.lastScrollTime) return;\r\n\r\n            this.scrolling = false;\r\n        }, 250);\r\n\r\n        // console.log('[sp] handleScroll');\r\n        //this.loadInViewContentOnScroll();\r\n        this.loadInViewContentOnScrollEnd();\r\n        this.updatePosition();\r\n\r\n        const scroll = this.scrollRef.current;\r\n\r\n        if (this.loadingChunk) return;\r\n\r\n        let loadChunk = false;\r\n        if (scroll.scrollTop + scroll.offsetHeight >= scroll.scrollHeight - 400) {\r\n            loadChunk = true;\r\n        }\r\n\r\n        if (!loadChunk) {\r\n            return false;\r\n        }\r\n\r\n        const { sets, stickerSets } = this.state;\r\n        if (stickerSets.sets.length === sets.length) return;\r\n\r\n        this.loadingChunk = true;\r\n        const promises = [];\r\n        stickerSets.sets.slice(this.setsLength, this.setsLength + 5).forEach(x => {\r\n            promises.push(\r\n                TdLibController.send({\r\n                    '@type': 'getStickerSet',\r\n                    set_id: x.id\r\n                })\r\n            );\r\n        });\r\n\r\n        const result = await Promise.all(promises).finally(() => {\r\n            this.loadingChunk = false;\r\n        });\r\n\r\n        this.setsLength += result.length;\r\n        this.setState({ sets: sets.concat(result) });\r\n    };\r\n\r\n    loadPreviewContent = stickerId => {\r\n        const { recent, sets } = this.state;\r\n\r\n        const sticker = getStickers([recent].concat(sets)).find(x => x.sticker.id === stickerId);\r\n        if (!sticker) return;\r\n\r\n        const store = FileStore.getStore();\r\n        loadStickerContent(store, sticker, null);\r\n\r\n        const stickersPerRow = 5;\r\n        const preloadStickers = getNeighborStickersFromSets(sticker, sets, stickersPerRow);\r\n        preloadStickers.forEach(x => {\r\n            loadStickerContent(store, x, null);\r\n        });\r\n    };\r\n\r\n    handleMouseEnter = event => {\r\n        const stickerId = Number(event.currentTarget.dataset.stickerId);\r\n        if (!stickerId) return;\r\n\r\n        if (!this.mouseDown) return;\r\n\r\n        if (this.mouseDownStickerId !== stickerId) {\r\n            this.mouseDownStickerId = null;\r\n        }\r\n        this.setState({ previewStickerId: stickerId });\r\n        this.loadPreviewContent(stickerId);\r\n\r\n        const { onPreview } = this.props;\r\n        const { recent, sets } = this.state;\r\n\r\n        const sticker = getStickers([recent].concat(sets)).find(x => x.sticker.id === stickerId);\r\n        onPreview(sticker);\r\n    };\r\n\r\n    handleMouseDown = event => {\r\n        const stickerId = Number(event.currentTarget.dataset.stickerId);\r\n        if (!stickerId) return;\r\n\r\n        this.mouseDownStickerId = stickerId;\r\n        const now = Date.now();\r\n\r\n        this.setState({ previewStickerId: stickerId, timestamp: now, showPreview: false, cancelSend: false });\r\n        setTimeout(() => {\r\n            const { timestamp } = this.state;\r\n            if (timestamp === now) {\r\n                this.setState({ showPreview: true, cancelSend: true }, () => {\r\n                    const { onPreview } = this.props;\r\n                    const { recent, sets } = this.state;\r\n\r\n                    const sticker = getStickers([recent].concat(sets)).find(x => x.sticker.id === stickerId);\r\n                    onPreview(sticker);\r\n                });\r\n            }\r\n        }, 500);\r\n\r\n        this.loadPreviewContent(stickerId);\r\n\r\n        this.mouseDown = true;\r\n        document.addEventListener('mouseup', this.handleMouseUp);\r\n\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        return false;\r\n    };\r\n\r\n    handleMouseUp = () => {\r\n        this.setState({ previewStickerId: 0, timestamp: 0, showPreview: false });\r\n\r\n        const { onPreview } = this.props;\r\n\r\n        onPreview(null);\r\n\r\n        this.mouseDown = false;\r\n        document.removeEventListener('mouseup', this.handleMouseUp);\r\n    };\r\n\r\n    handleStickerSelect = sticker => {\r\n        const { onSelect } = this.props;\r\n        const { cancelSend } = this.state;\r\n\r\n        if (cancelSend) return;\r\n\r\n        onSelect(sticker);\r\n    };\r\n\r\n    handleSelectSet = async position => {\r\n        const { sets, stickerSets } = this.state;\r\n        const { scrollRef } = this;\r\n\r\n        if (position === -1) {\r\n            const scroll = scrollRef.current;\r\n            scroll.scrollTop = 0;\r\n        } else if (position < sets.length) {\r\n            const element = this.itemsMap.get(sets[position].id);\r\n            if (element) {\r\n                const node = ReactDOM.findDOMNode(element);\r\n                if (node) {\r\n                    const scroll = scrollRef.current;\r\n                    scroll.scrollTop = node.offsetTop;\r\n                }\r\n            }\r\n        } else if (position < stickerSets.sets.length) {\r\n            if (this.loadingChunk) return;\r\n            if (stickerSets.sets.length === sets.length) return;\r\n\r\n            this.loadingChunk = true;\r\n            const promises = [];\r\n            stickerSets.sets.slice(this.setsLength, position + 1).forEach(x => {\r\n                promises.push(\r\n                    TdLibController.send({\r\n                        '@type': 'getStickerSet',\r\n                        set_id: x.id\r\n                    })\r\n                );\r\n            });\r\n\r\n            const result = await Promise.all(promises).finally(() => (this.loadingChunk = false));\r\n\r\n            this.setsLength += result.length;\r\n            let concatSets = sets.concat(result);\r\n            this.setState({ sets: concatSets }, () => {\r\n                if (position < concatSets.length) {\r\n                    this.handleSelectSet(position);\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    handleDeleteRecent = () => {\r\n        TdLibController.send({\r\n            '@type': 'clearRecentStickers',\r\n            is_attached: false\r\n        });\r\n    };\r\n\r\n    handleDeleteStickerSet = id => {\r\n        TdLibController.send({\r\n            '@type': 'changeStickerSet',\r\n            set_id: id,\r\n            is_installed: false\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { t, style } = this.props;\r\n        const { recent, stickerSets, sets, headerStickers } = this.state;\r\n        // console.log('[sp] render', recent, stickerSets, sets);\r\n        // if (!stickerSets) return null;\r\n        //\r\n        // if (!sets) return null;\r\n        // if (!sets.length) return null;\r\n\r\n        this.itemsMap.clear();\r\n        const items = sets.map(x => (\r\n            <StickerSet\r\n                key={x.id}\r\n                ref={el => this.itemsMap.set(x.id, el)}\r\n                info={x}\r\n                onSelect={this.handleStickerSelect}\r\n                onMouseDown={this.handleMouseDown}\r\n                onMouseEnter={this.handleMouseEnter}\r\n            />\r\n        ));\r\n\r\n        const recentInfo =\r\n            recent && recent.stickers.length > 0\r\n                ? {\r\n                      stickers: recent.stickers,\r\n                      title: t('RecentStickers')\r\n                  }\r\n                : null;\r\n\r\n        return (\r\n            <div className='stickers-picker' style={style}>\r\n                <StickersPickerHeader\r\n                    recent={recentInfo}\r\n                    stickers={headerStickers}\r\n                    onSelect={this.handleSelectSet} />\r\n                <div ref={this.scrollRef} className={classNames('stickers-picker-scroll', 'scrollbars-hidden')} onScroll={this.handleScroll}>\r\n                    {Boolean(recentInfo) && (\r\n                        <StickerSet\r\n                            ref={el => this.itemsMap.set('recent', el)}\r\n                            info={recentInfo}\r\n                            onSelect={this.handleStickerSelect}\r\n                            onMouseDown={this.handleMouseDown}\r\n                            onMouseEnter={this.handleMouseEnter}\r\n                            onDeleteClick={this.handleDeleteRecent}\r\n                        />\r\n                    )}\r\n                    {items}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nStickersPicker.propTypes = {\r\n    onSelect: PropTypes.func.isRequired,\r\n    onPreview: PropTypes.func.isRequired\r\n};\r\n\r\nconst enhance = compose(\r\n    withSaveRef(),\r\n    withTranslation(),\r\n    withRestoreRef()\r\n);\r\n\r\nexport default enhance(StickersPicker);\r\n","/*\r\n *  Copyright (c) 2018-present, Evgeny Nadymov\r\n *\r\n * This source code is licensed under the GPL v.3.0 license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as ReactDOM from 'react-dom';\r\nimport classNames from 'classnames';\r\nimport { withTranslation } from 'react-i18next';\r\nimport { compose, withRestoreRef, withSaveRef } from '../../Utils/HOC';\r\nimport Animation from '../Message/Media/Animation';\r\nimport { loadAnimationContent, loadAnimationThumbnailContent } from '../../Utils/File';\r\nimport { mapEquals, debounce, throttle } from '../../Utils/Common';\r\nimport AnimationStore from '../../Stores/AnimationStore';\r\nimport FileStore from '../../Stores/FileStore';\r\nimport TdLibController from '../../Controllers/TdLibController';\r\nimport './GifsPicker.css'\r\n\r\nclass GifsPicker extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.scrollRef = React.createRef();\r\n\r\n        this.itemsMap = new Map();\r\n\r\n        this.loadInViewContentOnScroll = throttle(this.loadInViewContentOnScroll, 250);\r\n        this.loadInViewContentOnScrollEnd = debounce(this.loadInViewContentOnScrollEnd, 250);\r\n    }\r\n\r\n    start() {\r\n        this.loadInViewContent();\r\n    }\r\n\r\n    stop() {\r\n        TdLibController.clientUpdate({\r\n            '@type': 'clientUpdateAnimationsInView',\r\n            animations: new Map()\r\n        })\r\n    }\r\n\r\n    handleScroll = event => {\r\n        const { scrollTop, scrollHeight, offsetHeight } = this.scrollRef.current;\r\n\r\n        this.loadInViewContentOnScrollEnd();\r\n\r\n        const begin = scrollTop <= 10;\r\n        const end = scrollHeight - (scrollTop + offsetHeight) <= 10;\r\n        const cancel = Math.abs(scrollTop - this.prevScrollTop) > 50 && !begin && !end; // too fast\r\n\r\n        // console.log('[gp] handleScroll', Math.abs(scrollTop - this.prevScrollTop), scrollTop, this.prevScrollTop, begin, end);\r\n        this.prevScrollTop = scrollTop;\r\n        if (cancel) {\r\n            // console.log('[gp] cancel handleScroll', scrollTop - this.prevScrollTop);\r\n            return;\r\n        }\r\n\r\n        this.loadInViewContent();\r\n    };\r\n\r\n    scrollTop = () => {\r\n        this.scrollRef.current.scrollTop = 0;\r\n    };\r\n\r\n    async loadContent() {\r\n        // console.log('[gp] loadContent');\r\n\r\n        let { savedAnimations } = AnimationStore;\r\n        if (!savedAnimations) {\r\n            const result = await TdLibController.send({\r\n                '@type': 'getSavedAnimations'\r\n            });\r\n\r\n            AnimationStore.savedAnimations = result;\r\n            savedAnimations = result;\r\n\r\n            this.forceUpdate(() => {\r\n                this.start();\r\n            });\r\n        }\r\n\r\n        // load content\r\n        const store = FileStore.getStore();\r\n        const previewAnimations = savedAnimations.animations.slice(0, 1000);\r\n\r\n        // console.log('[sp] loadAnimationThumbnailContent', previewAnimations);\r\n        previewAnimations.forEach(x => {\r\n            loadAnimationThumbnailContent(store, x, null);\r\n            loadAnimationContent(store, x, null, false);\r\n        });\r\n    }\r\n\r\n    loadInViewContentOnScroll = () => {\r\n        this.loadInViewContent();\r\n    };\r\n\r\n    loadInViewContentOnScrollEnd = () => {\r\n        this.loadInViewContent();\r\n    };\r\n\r\n    loadInViewContent = (padding = 0) => {\r\n        // console.log('[gp] loadInViewContent');\r\n        const scroll = this.scrollRef.current;\r\n\r\n        const { savedAnimations } = AnimationStore;\r\n        if (!savedAnimations) return;\r\n\r\n        const { animations } = savedAnimations;\r\n\r\n        const inViewMap = new Map();\r\n        const inViewIndexes = [];\r\n        animations.forEach((x, index) => {\r\n            const item = this.itemsMap.get(`${index}_${x.animation.id}`);\r\n            const node = ReactDOM.findDOMNode(item);\r\n            if (node) {\r\n                const topBorder = scroll.scrollTop - padding;\r\n                const bottomBorder = scroll.scrollTop + scroll.offsetHeight + padding;\r\n\r\n                const nodeTop = node.offsetTop;\r\n                const nodeBottom = node.offsetTop + node.clientHeight;\r\n\r\n                if (nodeTop >= topBorder && node.offsetTop <= bottomBorder) {\r\n                    inViewMap.set(x, x);\r\n                    inViewIndexes.push(index);\r\n                } else if (nodeBottom >= topBorder && nodeBottom <= bottomBorder) {\r\n                    inViewMap.set(x, x);\r\n                    inViewIndexes.push(index);\r\n                } else if (nodeTop <= topBorder && nodeBottom >= bottomBorder) {\r\n                    inViewMap.set(x, x);\r\n                    inViewIndexes.push(index);\r\n                }\r\n            }\r\n        });\r\n\r\n        const { animationsInView } = AnimationStore;\r\n        if (mapEquals(animationsInView, inViewMap)) {\r\n            // console.log('[gp] inViewItems equals', inViewIndexes, animationsInView);\r\n            return;\r\n        }\r\n\r\n\r\n        // console.log('[gp] inViewItems', inViewIndexes);\r\n        TdLibController.clientUpdate({\r\n            '@type': 'clientUpdateAnimationsInView',\r\n            animations: inViewMap\r\n        })\r\n\r\n        // inViewItems.forEach(x => {\r\n        //     const store = FileStore.getStore();\r\n        //     if (!this.loadedSets.has(x.id)) {\r\n        //         this.loadedSets.set(x.id, x.id);\r\n        //         loadStickerSetContent(store, x);\r\n        //     }\r\n        // });\r\n    };\r\n\r\n    handleMouseDown = event => {\r\n        const stickerId = Number(event.currentTarget.dataset.animationIndex);\r\n\r\n        this.mouseDownStickerId = stickerId;\r\n        const now = Date.now();\r\n\r\n        this.setState({ previewStickerId: stickerId, timestamp: now, showPreview: false, cancelSend: false });\r\n        setTimeout(() => {\r\n            const { timestamp } = this.state;\r\n            if (timestamp === now) {\r\n                this.setState({ showPreview: true, cancelSend: true }, () => {\r\n                    const { onPreview } = this.props;\r\n                    const { recent, sets } = this.state;\r\n\r\n                    const { savedAnimations } = AnimationStore;\r\n\r\n                    const sticker = savedAnimations.animations[stickerId];\r\n                    onPreview(sticker);\r\n                });\r\n            }\r\n        }, 500);\r\n\r\n        // this.loadPreviewContent(stickerId);\r\n\r\n        this.mouseDown = true;\r\n        document.addEventListener('mouseup', this.handleMouseUp);\r\n\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        return false;\r\n    };\r\n\r\n    handleMouseEnter = event => {\r\n        const stickerId = Number(event.currentTarget.dataset.animationIndex);\r\n\r\n        if (!this.mouseDown) return;\r\n\r\n        if (this.mouseDownStickerId !== stickerId) {\r\n            this.mouseDownStickerId = null;\r\n        }\r\n        this.setState({ previewStickerId: stickerId });\r\n        // this.loadPreviewContent(stickerId);\r\n\r\n        const { onPreview } = this.props;\r\n        const { savedAnimations } = AnimationStore;\r\n\r\n        const sticker = savedAnimations.animations[stickerId];\r\n        onPreview(sticker);\r\n    };\r\n\r\n    handleMouseUp = () => {\r\n        this.setState({ previewStickerId: 0, timestamp: 0, showPreview: false });\r\n\r\n        const { onPreview } = this.props;\r\n\r\n        onPreview(null);\r\n\r\n        this.mouseDown = false;\r\n        document.removeEventListener('mouseup', this.handleMouseUp);\r\n    };\r\n\r\n    openAnimation = animation => {\r\n        const { onSelect } = this.props;\r\n        const { cancelSend } = this.state;\r\n\r\n        if (cancelSend) return;\r\n\r\n        onSelect(animation);\r\n    };\r\n\r\n    render() {\r\n        const { t, style } = this.props;\r\n        const { savedAnimations } = AnimationStore;\r\n        if (!savedAnimations) return null;\r\n\r\n        this.itemsMap.clear();\r\n        const items = savedAnimations.animations.map((x, index) => (\r\n            <div\r\n                data-animation-index={index}\r\n                key={`${index}_${x.animation.id}`}\r\n                ref={el => this.itemsMap.set(`${index}_${x.animation.id}`, el)}\r\n                onMouseDown={this.handleMouseDown}\r\n                onMouseEnter={this.handleMouseEnter}\r\n                >\r\n                <Animation\r\n                    type='picker'\r\n                    animation={x}\r\n                    openMedia={() => this.openAnimation(x)}\r\n                    style={{ width: 104, height: 104, margin: 2, borderRadius: 0 }}\r\n                />\r\n            </div>\r\n        ));\r\n\r\n        return (\r\n            <div className='gifs-picker' style={style}>\r\n                <div ref={this.scrollRef} className={classNames('gifs-picker-scroll', 'scrollbars-hidden')} onScroll={this.handleScroll}>\r\n                    {items}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nGifsPicker.propTypes = {\r\n    onSelect: PropTypes.func.isRequired,\r\n    onPreview: PropTypes.func.isRequired\r\n};\r\n\r\nconst enhance = compose(\r\n    withSaveRef(),\r\n    withTranslation(),\r\n    withRestoreRef()\r\n);\r\n\r\nexport default enhance(GifsPicker);","/*\r\n *  Copyright (c) 2018-present, Evgeny Nadymov\r\n *\r\n * This source code is licensed under the GPL v.3.0 license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nimport React from 'react';\r\nimport classNames from 'classnames';\r\nimport { compose } from '../../Utils/HOC';\r\nimport withTheme from '@material-ui/core/styles/withTheme';\r\nimport { withTranslation } from 'react-i18next';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InsertEmoticonIcon from '../../Assets/Icons/Smile';\r\nimport { Picker as EmojiPicker } from 'emoji-mart';\r\n// import { NimblePicker as EmojiPicker } from 'emoji-mart';\r\n// import data from 'emoji-mart/data/messenger.json'\r\nimport AnimationPreview from './AnimationPreview';\r\nimport StickerPreview from './StickerPreview';\r\nimport StickersPicker from './StickersPicker';\r\nimport GifsPicker from './GifsPicker';\r\nimport { isAppleDevice } from '../../Utils/Common';\r\nimport { loadStickerThumbnailContent, loadStickerSetContent, loadRecentStickersContent, loadAnimationThumbnailContent } from '../../Utils/File';\r\nimport { EMOJI_PICKER_TIMEOUT_MS } from '../../Constants';\r\nimport AnimationStore from '../../Stores/AnimationStore';\r\nimport AppStore from '../../Stores/ApplicationStore';\r\nimport FileStore from '../../Stores/FileStore';\r\nimport LocalizationStore from '../../Stores/LocalizationStore';\r\nimport TdLibController from '../../Controllers/TdLibController';\r\nimport './EmojiPickerButton.css';\r\n\r\nclass EmojiPickerButton extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            open: false,\r\n            tab: 0\r\n        };\r\n\r\n        this.emojiPickerRef = React.createRef();\r\n        this.stickersPickerRef = React.createRef();\r\n        this.gifsPickerRef = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        AppStore.on('clientUpdateThemeChange', this.onClientUpdateChange);\r\n        LocalizationStore.on('clientUpdateLanguageChange', this.onClientUpdateChange);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        AppStore.off('clientUpdateThemeChange', this.onClientUpdateChange);\r\n        LocalizationStore.off('clientUpdateLanguageChange', this.onClientUpdateChange);\r\n    }\r\n\r\n    onClientUpdateChange = update => {\r\n        const { open } = this.state;\r\n\r\n        if (open) {\r\n            this.removePicker = true;\r\n        } else {\r\n            this.picker = null;\r\n        }\r\n    };\r\n\r\n    handleButtonMouseEnter = event => {\r\n        this.buttonEnter = true;\r\n        setTimeout(() => {\r\n            if (!this.buttonEnter) return;\r\n\r\n            this.updatePicker(true);\r\n            this.loadStickerSets();\r\n            this.loadSavedAnimations();\r\n\r\n            if (this.state.tab === 2) {\r\n                const gifsPicker = this.gifsPickerRef.current;\r\n                if (gifsPicker) {\r\n                    gifsPicker.start();\r\n                }\r\n            }\r\n        }, EMOJI_PICKER_TIMEOUT_MS);\r\n    };\r\n\r\n    loadSavedAnimations = async () => {\r\n        let { savedAnimations } = AnimationStore;\r\n        if (!savedAnimations) {\r\n            const result = await TdLibController.send({\r\n                '@type': 'getSavedAnimations'\r\n            });\r\n\r\n            AnimationStore.savedAnimations = result;\r\n            savedAnimations = result;\r\n        }\r\n\r\n        // load content\r\n        const store = FileStore.getStore();\r\n        const previewAnimations = savedAnimations.animations.slice(0, 1000);\r\n\r\n        // console.log('[sp] loadAnimationThumbnailContent', previewAnimations);\r\n        previewAnimations.forEach(x => {\r\n            loadAnimationThumbnailContent(store, x);\r\n        });\r\n    };\r\n\r\n    loadStickerSets = async () => {\r\n        if (this.sets) return;\r\n\r\n        this.recent = await TdLibController.send({\r\n            '@type': 'getRecentStickers',\r\n            is_attached: false\r\n        });\r\n\r\n        this.stickerSets = await TdLibController.send({\r\n            '@type': 'getInstalledStickerSets',\r\n            is_masks: false\r\n        });\r\n\r\n        const promises = [];\r\n        this.stickerSets.sets.forEach(x => {\r\n            promises.push(\r\n                TdLibController.send({\r\n                    '@type': 'getStickerSet',\r\n                    set_id: x.id\r\n                })\r\n            );\r\n        });\r\n\r\n        this.sets = await Promise.all(promises);\r\n\r\n        const node = this.stickersPickerRef.current;\r\n\r\n        const store = FileStore.getStore();\r\n        loadRecentStickersContent(store, this.recent);\r\n\r\n        const previewSets = this.sets.slice(0, 5).reverse();\r\n        previewSets.forEach(x => {\r\n            loadStickerSetContent(store, x);\r\n            node.loadedSets.set(x.id, x.id);\r\n        });\r\n\r\n        const previewStickers = this.sets.reduce((stickers, set) => {\r\n            if (set.stickers.length > 0) {\r\n                stickers.push(set.stickers[0]);\r\n            }\r\n            return stickers;\r\n        }, []);\r\n        previewStickers.forEach(x => {\r\n            loadStickerThumbnailContent(store, x);\r\n        });\r\n    };\r\n\r\n    handleButtonMouseLeave = () => {\r\n        this.buttonEnter = false;\r\n        setTimeout(() => {\r\n            this.tryClosePicker();\r\n        }, EMOJI_PICKER_TIMEOUT_MS);\r\n    };\r\n\r\n    tryClosePicker = () => {\r\n        // return;\r\n\r\n        const { animation, sticker } = this.state;\r\n        if (this.paperEnter || this.buttonEnter || sticker || animation) return;\r\n\r\n        this.updatePicker(false);\r\n    };\r\n\r\n    handlePaperMouseEnter = () => {\r\n        this.paperEnter = true;\r\n    };\r\n\r\n    handlePaperMouseLeave = () => {\r\n        // return;\r\n\r\n        this.paperEnter = false;\r\n        setTimeout(() => {\r\n            this.tryClosePicker();\r\n        }, EMOJI_PICKER_TIMEOUT_MS);\r\n    };\r\n\r\n    updatePicker = open => {\r\n        this.setState({ open }, () => {\r\n            if (!this.state.open) {\r\n                if (this.removePicker) {\r\n                    this.picker = null;\r\n                    this.removePicker = false;\r\n                }\r\n\r\n                const gifsPicker = this.gifsPickerRef.current;\r\n                if (gifsPicker) {\r\n                    gifsPicker.stop();\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    handleEmojiClick = () => {\r\n        this.setState({ tab: 0 });\r\n\r\n        const gifsPicker = this.gifsPickerRef.current;\r\n        if (gifsPicker) {\r\n            gifsPicker.stop();\r\n        }\r\n\r\n        const stickersPicker = this.stickersPickerRef.current;\r\n        if (stickersPicker) {\r\n            stickersPicker.stop();\r\n        }\r\n    };\r\n\r\n    handleStickersClick = () => {\r\n        const stickersPicker = this.stickersPickerRef.current;\r\n        const { tab } = this.state;\r\n\r\n        // console.log('[sp] handleStickersClick');\r\n\r\n        if (tab === 1) {\r\n            if (stickersPicker) {\r\n                stickersPicker.scrollTop();\r\n            }\r\n        } else {\r\n            setTimeout(() => {\r\n                // console.log('[sp] handleStickersClick.loadContent');\r\n                stickersPicker.loadContent(this.recent, this.stickerSets, this.sets);\r\n            }, 150);\r\n\r\n            this.setState({ tab: 1 });\r\n        }\r\n\r\n        const gifsPicker = this.gifsPickerRef.current;\r\n        if (gifsPicker) {\r\n            gifsPicker.stop();\r\n        }\r\n    };\r\n\r\n    handleGifsClick = () => {\r\n        const gifsPicker = this.gifsPickerRef.current;\r\n        const { tab } = this.state;\r\n\r\n        if (tab === 2) {\r\n            if (gifsPicker) {\r\n                gifsPicker.scrollTop();\r\n            }\r\n        } else {\r\n            const { savedAnimations } = AnimationStore;\r\n\r\n            setTimeout(() => {\r\n                gifsPicker.loadContent(savedAnimations);\r\n                gifsPicker.start();\r\n            }, 150);\r\n\r\n            this.setState({ tab: 2 });\r\n        }\r\n\r\n        const stickersPicker = this.stickersPickerRef.current;\r\n        if (stickersPicker) {\r\n            stickersPicker.stop();\r\n        }\r\n    };\r\n\r\n    handleStickerSend = sticker => {\r\n        if (!sticker) return;\r\n\r\n        TdLibController.clientUpdate({\r\n            '@type': 'clientUpdateStickerSend',\r\n            sticker\r\n        });\r\n\r\n        this.updatePicker(false);\r\n    };\r\n\r\n    handleStickerPreview = sticker => {\r\n        this.setState({ sticker });\r\n        TdLibController.clientUpdate({\r\n            '@type': 'clientUpdateStickerPreview',\r\n            sticker\r\n        });\r\n\r\n        if (!sticker) {\r\n            this.tryClosePicker();\r\n        }\r\n    };\r\n\r\n    handleGifSend = animation => {\r\n        if (!animation) return;\r\n\r\n        TdLibController.clientUpdate({\r\n            '@type': 'clientUpdateAnimationSend',\r\n            animation\r\n        });\r\n\r\n        this.updatePicker(false);\r\n    };\r\n\r\n    handleGifPreview = animation => {\r\n        this.setState({ animation });\r\n        TdLibController.clientUpdate({\r\n            '@type': 'clientUpdateAnimationPreview',\r\n            animation\r\n        });\r\n\r\n        if (!animation) {\r\n            this.tryClosePicker();\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { theme, t } = this.props;\r\n        const { open, tab, animation, sticker } = this.state;\r\n\r\n        if (open && !this.picker) {\r\n            const i18n = {\r\n                search: t('Search'),\r\n                notfound: t('NotEmojiFound'),\r\n                skintext: t('ChooseDefaultSkinTone'),\r\n                categories: {\r\n                    search: t('SearchResults'),\r\n                    recent: t('Recent'),\r\n                    people: t('SmileysPeople'),\r\n                    nature: t('AnimalsNature'),\r\n                    foods: t('FoodDrink'),\r\n                    activity: t('Activity'),\r\n                    places: t('TravelPlaces'),\r\n                    objects: t('Objects'),\r\n                    symbols: t('Symbols'),\r\n                    flags: t('Flags'),\r\n                    custom: t('Custom')\r\n                }\r\n            };\r\n\r\n            this.picker = (\r\n                <EmojiPicker\r\n                    ref={this.emojiPickerRef}\r\n                    // data={data}\r\n                    set='apple'\r\n                    showPreview={false}\r\n                    showSkinTones={false}\r\n                    onSelect={this.props.onSelect}\r\n                    color={theme.palette.primary.dark}\r\n                    i18n={i18n}\r\n                    native={isAppleDevice()}\r\n                    style={{ width: 338, overflowX: 'hidden', position: 'absolute', left: 0, top: 0 }}\r\n                />\r\n            );\r\n\r\n            this.stickersPicker = (\r\n                <StickersPicker\r\n                    ref={this.stickersPickerRef}\r\n                    onSelect={this.handleStickerSend}\r\n                    onPreview={this.handleStickerPreview}\r\n                    style={{ position: 'absolute', left: 338, top: 0 }}\r\n                />\r\n            );\r\n\r\n            this.gifsPicker = (\r\n                <GifsPicker\r\n                    ref={this.gifsPickerRef}\r\n                    onSelect={this.handleGifSend}\r\n                    onPreview={this.handleGifPreview}\r\n                    style={{ width: 338, overflowX: 'hidden', position: 'absolute', left: 676, top: 0 }}\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <link\r\n                    rel='stylesheet'\r\n                    type='text/css'\r\n                    href={theme.palette.type === 'dark' ? 'emoji-mart.dark.css' : 'emoji-mart.light.css'}\r\n                />\r\n                <IconButton\r\n                    className='inputbox-icon-button'\r\n                    aria-label='Emoticon'\r\n                    onMouseEnter={this.handleButtonMouseEnter}\r\n                    onMouseLeave={this.handleButtonMouseLeave}>\r\n                    <InsertEmoticonIcon />\r\n                </IconButton>\r\n                <div\r\n                    className={classNames('emoji-picker-root', { 'emoji-picker-root-opened': open })}\r\n                    onMouseEnter={this.handlePaperMouseEnter}\r\n                    onMouseLeave={this.handlePaperMouseLeave}>\r\n                    <div className={classNames('emoji-picker-content', { 'emoji-picker-content-stickers': tab === 1 }, { 'emoji-picker-content-gifs': tab === 2 })}>\r\n                        {this.picker}\r\n                        {this.stickersPicker}\r\n                        {this.gifsPicker}\r\n                    </div>\r\n                    <div className='emoji-picker-header'>\r\n                        <Button\r\n                            color={tab === 0 ? 'primary' : 'default'}\r\n                            className='emoji-picker-header-button'\r\n                            onClick={this.handleEmojiClick}>\r\n                            {t('表情')}\r\n                        </Button>\r\n                        <Button\r\n                            color={tab === 1 ? 'primary' : 'default'}\r\n                            className='emoji-picker-header-button'\r\n                            onClick={this.handleStickersClick}>\r\n                            {t('贴纸')}\r\n                        </Button>\r\n                        <Button\r\n                            color={tab === 2 ? 'primary' : 'default'}\r\n                            className='emoji-picker-header-button'\r\n                            onClick={this.handleGifsClick}>\r\n                            {t('贴纸Gif')}\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n                {Boolean(sticker) && <StickerPreview sticker={sticker} />}\r\n                {Boolean(animation) && <AnimationPreview animation={animation} />}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst enhance = compose(\r\n    withTranslation(),\r\n    withTheme\r\n);\r\n\r\nexport default enhance(EmojiPickerButton);\r\n"],"sourceRoot":""}